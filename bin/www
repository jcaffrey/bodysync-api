#!/usr/bin/env node

// http://docs.sequelizejs.com/en/1.7.0/articles/express/


// dependencies
var app = require('../app');
var debug = require('debug')('backend:server');
var http = require('http');
var models = require('../models');

// Source and set port, create server
function normalizePort(val) {
  var port = parseInt(val, 10);
  if (isNaN(port)) {  return val; }
  if (port >= 0) { return port; }
  return false;
}

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);
var server = http.createServer(app);

// sync schemas / model schemas defined in app to the db (think of this as creating the tables we want)
models.sequelize.sync().then(function() {
    // listen on provided port
    server.listen(port);
    server.on('error', onError);
    server.on('listening', onListening);
});



/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
